diff --git a/cecog/analyzer/plate.py b/cecog/analyzer/plate.py
index 1286d4a4..5a898976 100644
--- a/cecog/analyzer/plate.py
+++ b/cecog/analyzer/plate.py
@@ -176,11 +176,9 @@ class PlateAnalyzer(Analyzer):
 
     def __call__(self):
 
-        # check for exiting site if the file already exists
-        finished = dict()
-        if self.settings('General', 'skip_finished') and isfile(self.h5f):
-            with Ch5File(self.h5f, mode="a") as ch5:
-                finished = ch5.existingSites(self.plate)
+        # skip plate if exists
+        if self.settings('General', 'skip_finished') and os.path.isfile(self.h5f):
+            return
 
         layout = "%s/%s.txt" %(self.settings("General", "plate_layout"), self.plate)
         layout = Ch5File.layoutFromTxt(layout)
@@ -189,15 +187,15 @@ class PlateAnalyzer(Analyzer):
             i = layout["File"].tolist().index(pos)
             well, site = layout["Well"][i], layout["Site"][i]
             wsstr = "%s_%02d" %(well, site)
+            datafile = join(self._cellh5_dir, '%s.ch5' %wsstr)
 
-            if well in finished and str(site) in finished[well]:
+            if self.settings('General', 'skip_finished') and os.path.isfile(datafile):
                 msg = 'Skipping already processed postion %s' %wsstr
                 self.logger.info(msg)
                 continue
             else:
                 self.logger.info('Processing position: %s' %wsstr)
 
-            datafile = join(self._cellh5_dir, '%s.ch5' %wsstr)
             analyzer = PositionAnalyzer(
                 self.plate, pos, datafile, self.settings, self.frames,
                 self.sample_reader, self.sample_positions, None,
@@ -205,25 +203,17 @@ class PlateAnalyzer(Analyzer):
 
             try:
                 analyzer()
-                for i in range(10):
-                    # try several times to create the site. on the cluster
-                    # many processes will open the file in this mode at the
-                    # same time
-                    try:
-                        with Ch5File(self.h5f, mode="a") as ch5:
-                            ch5.createSite(analyzer.datafile)
-                            break
-                    except IOError:
-                        continue
-
             except StopProcessing:
                 pass
             except Exception as e:
+                os.remove(datafile)
+                self.logger.error("Removed file %s" %datafile)
                 traceback.print_exc()
                 raise
             finally:
                 analyzer.clear()
-
+                if analyzer.isAborted():
+                    os.remove(datafile)
 
 class AnalyzerBrowser(PlateAnalyzer):
 
diff --git a/cecog/io/hdf.py b/cecog/io/hdf.py
index d20ead93..d8aa5aed 100644
--- a/cecog/io/hdf.py
+++ b/cecog/io/hdf.py
@@ -37,7 +37,7 @@ LayoutDtype = np.dtype(
      ('siRNA', 'S8'), ('Group', 'S10')])
 
 
-def mergeHdfFiles(target, source_dir, remove_source=True, mode="a"):
+def mergeHdfFiles(target, source_dir, remove_source=True, mode="w"):
 
     hdffiles = glob.glob(os.path.join(source_dir, '*.ch5'))
     target = h5py.File(target, mode=mode)
@@ -54,12 +54,9 @@ def mergeHdfFiles(target, source_dir, remove_source=True, mode="a"):
         well = first_item(source[Well % plate].keys())
         position = first_item(source[Site %(plate, well, "")].keys())
 
-        path_ = Site %(plate, well, position)
-
-        for group in source[path_].keys():
-            path = "%s/%s" %(path_, group)
-            target.copy(source[path], path)
+        path = Site %(plate, well, position)
 
+        target.copy(source[path], path)
         source.close()
 
         if remove_source:
@@ -186,19 +183,6 @@ class Ch5File(CH5FileWriter):
 
         return rec
 
-    def createSite(self, filename):
-        """Create an empty group for a Site."""
-
-        sf = h5py.File(filename, "r")
-        plate = sf[Plate].keys()[0]
-        well = sf[Well %plate].keys()[0]
-        site = sf[Site[:-2] %(plate, well)].keys()[0]
-        path = Site %(plate, well, site)
-        sf.close()
-
-        if not path in self._file_handle:
-            self._file_handle.create_group(path)
-
     def existingSites(self, plate):
 
         wsites = dict()
diff --git a/scripts/cecog_batch.py b/scripts/cecog_batch.py
index b4151f24..8719d638 100755
--- a/scripts/cecog_batch.py
+++ b/scripts/cecog_batch.py
@@ -14,6 +14,7 @@ __url__ = 'www.cellcognition.org'
 
 import os
 import sys
+import glob
 import time
 import random
 import logging
@@ -43,16 +44,6 @@ ENV_INDEX_SGE = 'SGE_TASK_ID'
 PLATESEP = "___"
 POSSEP = ","
 
-def getCellH5NumberOfSites(file_):
-    """Determine the number of site within a file."""
-
-    c5 = Ch5File(file_)
-    nsites = 0
-    plates = c5.plates()
-    for plate in plates:
-        nsites += c5.numberSitesEmpty(plate)
-    return nsites
-
 
 if __name__ ==  "__main__":
     os.umask(0o000)
@@ -174,7 +165,7 @@ if __name__ ==  "__main__":
         analyzer()
         ch5file = analyzer.h5f
 
-    n_sites = getCellH5NumberOfSites(ch5file)
+    n_sites = len(glob.glob(os.path.join(settings("General", "pathout"), "cellh5", "*.ch5")))
     n_total = len(imagecontainer.get_meta_data().positions)
     posflag = settings("General", "constrain_positions")
 
