<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
        xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:cm="org.cecog.classifier.view.components.*"
        width="100%" height="100%"
        color="#000000" themeColor="#0066FF" xmlns:ns1="flexlib.containers.*" xmlns:ns2="flexlib.controls.*"
        creationComplete="onCreationComplete()" xmlns:display="flash.display.*">

    <mx:Script>
        <![CDATA[
            import mx.binding.utils.BindingUtils;
            import mx.collections.ArrayCollection;
            import mx.events.ItemClickEvent;
            import mx.core.Application;

            public static const GET_EXPERIMENT_BY_NAME:String = 'GET_EXPERIMENT_BY_NAME';
            public static const SLIDER_CHANGED:String = 'SLIDER_CHANGED';
            public static const IMAGEVIEW_WHEEL:String = 'IMAGEVIEW_WHEEL';
            public static const IMAGEVIEW_SCALE_CHANGED:String = 'IMAGEVIEW_SCALE_CHANGED';
            public static const DETECT_OBJECTS:String = 'DETECT_OBJECTS';

            [Bindable]
            public var experiments:ArrayCollection;

            [Bindable]
            public var classInfos:ArrayCollection;

            [Bindable]
            public var isViewDragged:Boolean = false;

            public function onCreationComplete():void
            {
                Application.application.addEventListener(MouseEvent.MOUSE_UP, viewStopDrag);
                Application.application.addEventListener(MouseEvent.MOUSE_MOVE, viewMoveDrag);
            }

            public function viewStartDrag(ev:MouseEvent):void
            {
                if (ev.altKey)
                {
//                    imageView.useHandCursor = true;
//                    imageView.buttonMode = true;
//                    imageView.mouseChildren = false;
                    isViewDragged = true;
                    viewMove.end();
                    imageView.startDrag(false);
                }
            }

            public function viewStopDrag(ev:MouseEvent):void
            {
                if (isViewDragged)
                {
                    imageView.stopDrag();
//                    imageView.useHandCursor = false;
//                    imageView.buttonMode = false;
//                    imageView.mouseChildren = true;
                    isViewDragged = false;
                    __viewDragControl(0, true);
                }
            }

            public function viewMoveDrag(ev:MouseEvent):void
            {
                if (isViewDragged)
                {
                    if (!ev.altKey)
                    {
                        viewStopDrag(ev);
                        ev.stopImmediatePropagation();
                    }
                    __viewDragControl(20, false);
                }
            }

            private function __viewDragControl(dragBorder:int=0, animate:Boolean=false):void
            {
                var finalX:int = imageView.x;
                var finalY:int = imageView.y;
                if (imageView.width > viewCanvas.width)
                {
                    if (imageView.x > viewCanvas.x + dragBorder)
                        finalX = viewCanvas.x+dragBorder;
                    if (imageView.x + imageView.width < viewCanvas.x + viewCanvas.width - dragBorder)
                        finalX = viewCanvas.x + viewCanvas.width - imageView.width - dragBorder;
                } else
                    finalX = viewCanvas.x + (viewCanvas.width - imageView.width) / 2;
                if (imageView.height > viewCanvas.height)
                {
                    if (imageView.y > viewCanvas.y + dragBorder)
                        finalY = viewCanvas.y + dragBorder;
                    if (imageView.y + imageView.height < viewCanvas.y + viewCanvas.height - dragBorder)
                        finalY = viewCanvas.y + viewCanvas.height - imageView.height - dragBorder;
                } else
                    finalY = viewCanvas.y + (viewCanvas.height - imageView.height) / 2;

                if (animate)
                {
                    viewMove.end();
                    viewMove.xTo = finalX;
                    viewMove.yTo = finalY;
                    viewMove.play();
                } else
                {
                    imageView.x = finalX;
                    imageView.y = finalY;
                }
            }

        ]]>
    </mx:Script>


    <mx:Move id="viewMove" target="{imageView}" duration="200"/>

    <mx:Grid right="5" bottom="5" left="297" top="5">
        <!--
        <mx:GridRow width="100%" height="20">
            <mx:GridItem width="20" height="20">
            </mx:GridItem>
            <mx:GridItem width="100%" height="20">
                <ns2:HSlider id="sliderP" width="100%" snapInterval="1" tickInterval="1" tickColor="black" dataTipPrecision="0" change="dispatchEvent(new Event(SLIDER_CHANGED))"/>
            </mx:GridItem>
        </mx:GridRow>
        //-->
        <mx:GridRow width="100%" height="100%">
            <mx:GridItem width="20" height="100%">
                <ns2:VSlider id="sliderZ" height="100%" snapInterval="1" tickInterval="1" tickColor="black" dataTipPrecision="0" change="dispatchEvent(new Event(SLIDER_CHANGED))"/>
            </mx:GridItem>
            <mx:GridItem width="100%" height="100%">
                <mx:Canvas id="viewCanvas" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off"
                    borderColor="#000000" borderThickness="1" borderStyle="solid"
                    backgroundColor="#000000" backgroundAlpha="0.5"
                    resize="__viewDragControl(0,false)">
                    <ns2:ImageMap id="imageView" showToolTips="true" mouseDown="viewStartDrag(event)"/>
                    <ns2:VSlider id="sliderScale" width="21" right="1" top="1" snapInterval="1" liveDragging="true"
                        alpha="0.7" minimum="10" maximum="400" value="100" dataTipPrecision="0"
                        change="dispatchEvent(new Event(IMAGEVIEW_SCALE_CHANGED))"/>
                </mx:Canvas>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%" height="20">
            <mx:GridItem width="20" height="20">
            </mx:GridItem>
            <mx:GridItem width="100%" height="20">
                <ns2:HSlider id="sliderT" width="100%" snapInterval="1" dataTipPrecision="0" change="dispatchEvent(new Event(SLIDER_CHANGED))"/>
            </mx:GridItem>
        </mx:GridRow>
    </mx:Grid>
    <mx:CheckBox x="39" y="558" id="detectObjects" label="Detect Objects" click="dispatchEvent(new Event(DETECT_OBJECTS))" selected="false"/>

    <mx:Accordion width="274" height="506" x="5" y="5">
        <mx:headerRenderer>
            <mx:Component>
                <mx:Button styleName="accHeader"/>
            </mx:Component>
        </mx:headerRenderer>

        <mx:Canvas label="Experiments" width="100%" height="100%">
            <mx:DataGrid width="100%" height="100%"
                id="experimentsGrid"
                dataProvider="{experiments}"
                color="#000000"
                alternatingItemColors="[#FFFFFF,#DDDDDD]"
                click="dispatchEvent(new ItemClickEvent(GET_EXPERIMENT_BY_NAME, true, false, null, experimentsGrid.selectedIndex, null, experimentsGrid.selectedItem))">
                <mx:columns>
                    <mx:DataGridColumn headerText="Name" dataField="name"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:Canvas>

        <mx:Canvas id="metaDataPanel" label="MetaData" width="100%" height="100%">
            <mx:Grid x="10" y="10" width="210" height="162">
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Experiment ID:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelID"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Positions:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelP"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Time Points:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelT"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Channels:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelC"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Z-Slices:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelZ"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Width:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelX"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="80%" height="100%">
                        <mx:Label text="Height:"/>
                    </mx:GridItem>
                    <mx:GridItem width="100%" height="100%">
                        <mx:Label id="labelY"/>
                    </mx:GridItem>
                </mx:GridRow>
            </mx:Grid>
        </mx:Canvas>

        <mx:Canvas label="Positions" width="100%" height="100%">
            <mx:DataGrid width="100%" height="100%"
                id="positionsGrid"
                color="#000000"
                alternatingItemColors="[#FFFFFF,#DDDDDD]"
                click="dispatchEvent(new Event(SLIDER_CHANGED))"
                >
                <mx:columns>
                    <mx:DataGridColumn headerText="Name" dataField="name" width="60"/>
                    <mx:DataGridColumn headerText="OligoID" dataField="oligoId"/>
                    <mx:DataGridColumn headerText="GeneSymbol" dataField="geneSymbol"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:Canvas>

        <mx:Canvas label="Channels" width="100%" height="100%">
            <mx:DataGrid width="100%" height="100%"
                id="channelsGrid"
                color="#000000"
                alternatingItemColors="[#FFFFFF,#DDDDDD]"
                click="dispatchEvent(new Event(SLIDER_CHANGED))"
                allowMultipleSelection="true"
                >
                <mx:columns>
                    <mx:DataGridColumn headerText="Name" dataField="name" width="60"/>
                    <mx:DataGridColumn headerText="Color" dataField="color" width="50">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:HBox horizontalAlign="center">
                                    <mx:ColorPicker width="18" height="18" selectedColor="{data.color}"/>
                                </mx:HBox>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
        </mx:Canvas>

        <mx:Canvas label="Classes" width="100%" height="100%">
            <mx:DataGrid id="classesGrid2"
                dataProvider="{classInfos}" color="#000000" alternatingItemColors="[#FFFFFF,#DDDDDD]" width="100%" height="100%"

                >
                <mx:columns>
                    <mx:DataGridColumn headerText="Label" width="50" dataField="label"/>
                    <mx:DataGridColumn headerText="Color" width="50">
                        <mx:itemRenderer>
                            <mx:Component>
                            <mx:HBox horizontalAlign="center" verticalAlign="middle">
                                <mx:Box backgroundColor="{data.color}" width="15" height="15"/>
                            </mx:HBox>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>

                    <mx:DataGridColumn headerText="Name" dataField="name"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:Canvas>

    </mx:Accordion>
    <mx:Image source="@Embed('assets/cellcognition7_small2.png')" bottom="5" left="5"/>


</mx:Canvas>
